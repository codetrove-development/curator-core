{"version":3,"sources":["webpack://SnappyGridCore/webpack/universalModuleDefinition","webpack://SnappyGridCore/webpack/bootstrap","webpack://SnappyGridCore/./src/helpers.js","webpack://SnappyGridCore/./src/options.js","webpack://SnappyGridCore/./src/snappy-grid-core.js"],"names":["isDefined","item","renderModeType","flex","fixed","resizeOptions","none","x","y","both","defaultItemOptions","width","height","classes","glued","visible","canResize","displayResize","position","topPx","leftPx","topPct","leftPct","widthPx","heightPx","widthPct","heightPct","ending","meta","isDragging","defaultPlaceholderStyles","border","zIndex","defaultGridOptions","gridColumns","gridRows","itemClassName","renderMode","stickyElements","itemsCanResizeGrid","resizeGridDirections","useTransition","transitionDuration","onTransitionComplete","element","details","eventIfFired","onAllTransitionsComplete","resizeClassName","enableCSS3","algorithm","getItemStyles","boxSizing","getItemClasses","itemOptions","push","getEmptyGrid","grid","r","getItemPosition","gridWidth","gridHeight","gridCols","left","top","getItemPositionPixels","getItemPositionPercentages","pxPerColFloored","Math","floor","pxPerRowFloored","colRemainderPx","rowRemainderPx","widthPxOffset","heightPxOffset","extraLeft","min","extraWidth","extraTop","extraHeight","updateMovedItem","gridSizing","gridOptions","newX","newY","newWidth","newHeight","movedItem","console","error","key","styles","getItemPositionStyles","updateGridWithMovedItems","items","updateGridWithItemMovement","getUpdatedMovedItems","draggedItemId","newTopPx","newLeftPx","newWidthPx","newHeightPx","forEach","getUpdatedGridSizeItems","ignoreIds","map","indexOf","id","getGridBoundaries","leftBoundary","rightBoundary","topBoundary","bottomBoundary","getItemSizing","itemProps","pxPerColumn","pxPerRow","itemWidthPx","itemHeightPx","calculateGridMatrixSize","canResizeX","canResizeY","rows","columns","rowsRequired","columnsRequired","max","calculateGridSize","newRowCount","newColumnCount","newGridWidth","newGridHeight","calculateMovementChange","movementDetails","gridResizeable","xDiff","currentMouseX","initialMouseX","yDiff","currentMouseY","initialMouseY","initialLeft","initialTop","round","calculateResizeChange","initialWidth","initialHeight","calculatePositionChange","state","getNoMovementResult","movementChange","targetItem","updatedItems","success","itemsMoved","itemHasMoved","itemHasResized","checkProposedGridSizing","proposedGridColumns","proposedGridRows","getPlaceholderStyles","addItemToGrid","onItemMovement","movementIsWithinBounds","defaultResult","draggedItem","dragResult","algo","run","gridResized","newSize","Object","keys","itemsToMove","placeholderStyles","log","length","onItemPositionChanged","previousItemProps","positionChange","positionHasChanged","onItemDragStart","onItemDrag","onItemDragStop","updatedItem","onItemResizeStart","isResizing","onItemResize","onItemResizeStop","oldX","oldY","oldWidth","oldHeight","ensureGridHasRow","setGridWithValue","undefined","updateGridWithItem","removeGridItem","gridItems","itemsReverted","onGridItemRemoved","revertDetails","find","i","filter","rowIndex","value","overwrite","j","cellValue","helpers","transform","otherStyles","getGridXY","getGridPosition","getGridWH","gridPixels","itemPixels","matrixLevels","getBoundaryLimitedSizing","currentLeftPx","currentTopPx","currentWidthPx","currentHeightPx","boundaries","xResizeable","yResizeable"],"mappings":"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","file":"snappy-grid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SnappyGridCore\"] = factory();\n\telse\n\t\troot[\"SnappyGridCore\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/snappy-grid-core.js\");\n","const isDefined = ( item ) => {\r\n    return typeof item !== 'undefined' && item != null\r\n}\r\n\r\nexport default {\r\n    isDefined,\r\n}","const renderModeType = {\r\n    // flex = percentages\r\n    flex: 'flex',\r\n    // fixed = px\r\n    fixed: 'fixed'\r\n}\r\n\r\nconst resizeOptions = {\r\n    // boxes are fixed width\r\n    none: 'none',\r\n    // resize x direction only\r\n    x: 'x',\r\n    // resize y direction \r\n    y: 'y', \r\n    // resize both\r\n    both: 'both'\r\n}\r\n\r\nconst defaultItemOptions = {\r\n    x: 0,\r\n    y: 0,\r\n    width: 1,\r\n    height: 1,\r\n    classes: [],\r\n    glued: false,\r\n    // not yet supported but is partially done in the algo, do not alter\r\n    visible: true,\r\n    canResize: true,\r\n    displayResize: true,\r\n    position: {\r\n        topPx: 0,\r\n        leftPx: 0,\r\n        topPct: 0,\r\n        leftPct: 0,\r\n        widthPx: 0,\r\n        heightPx: 0,\r\n        widthPct: 0,\r\n        heightPct: 0,\r\n        ending: 'px'\r\n    },\r\n    meta: {\r\n        isDragging: false,\r\n    }\r\n}\r\n\r\nconst defaultPlaceholderStyles = {\r\n    position: 'absolute',\r\n    border: '2px dashed grey',\r\n    zIndex: -1,\r\n}\r\n\r\nconst defaultGridOptions = {\r\n    gridColumns: 12,\r\n    gridRows: 12,\r\n    width: '100%',\r\n    height: '100%',\r\n    itemClassName: 'grid-item',\r\n    // any extra classes to add to the element\r\n    classes: [],\r\n    // whether to render the grid items using percentages or pixel values\r\n    renderMode: renderModeType.flex,\r\n    // when a dragged element pushes others out of the way, they may return to their \r\n    // old spot if dragging continues\r\n    stickyElements: true,\r\n    // show the grid lines: not currently supported\r\n    //showGrid: false,\r\n    // can resize the grid by dragging elements\r\n    itemsCanResizeGrid: true,\r\n    // which directions the grid can resize in (either dragging handle or items)\r\n    resizeGridDirections: resizeOptions.y,\r\n    // move items using transitions\r\n    useTransition: true,\r\n    // specific options for transitions\r\n    transitionDuration: 600,\r\n    // On an individual transition completed for an element (multiple fires when multiple elements moved)\r\n    onTransitionComplete: ( element, details, eventIfFired ) => { },\r\n    // On all transitions completed for a given element\r\n    onAllTransitionsComplete: ( element, details, eventIfFired ) => { },\r\n    // class name for the resize handle\r\n    resizeClassName: 'snap-resize-handle',\r\n    enableCSS3: true,\r\n    algorithm: null,\r\n}\r\n\r\nexport {\r\n    renderModeType,\r\n    resizeOptions,\r\n    defaultItemOptions,\r\n    defaultGridOptions,\r\n    defaultPlaceholderStyles,\r\n}","\r\n\r\n// Snapper core is responsible for handling all logic for interacting with the grid\r\n// except:\r\n// 1. direct ui manipulation (responsibility of the wrapper)\r\n// 2. internal grid determination (responsibility of the algorithm)\r\n// 3. Maintenence of state (responsibility of the wrapper)\r\nimport helpers from './helpers'\r\nimport { \r\n    renderModeType, \r\n    resizeOptions, \r\n    defaultItemOptions, \r\n    defaultGridOptions ,\r\n    defaultPlaceholderStyles,\r\n} from './options'\r\n\r\nexport default {\r\n    getItemStyles() {\r\n        return {\r\n            boxSizing: 'border-box',\r\n            position: 'absolute'\r\n        }\r\n    },\r\n\r\n    getItemClasses( itemOptions = defaultItemOptions ) {\r\n        const classes = [ ...itemOptions.classes, itemOptions.itemClassName ]\r\n\r\n        if ( itemOptions.glued ) {\r\n            classes.push('snapper-glued')\r\n        }\r\n\r\n        return classes\r\n    },\r\n\r\n    getEmptyGrid( gridRows ) {\r\n        let grid = []\r\n\r\n        for( let r = 0; r < gridRows; r++ )\r\n            grid.push( [] )\r\n\r\n        return grid\r\n    },\r\n\r\n    /// \r\n    /// Calculate the position of the item within the grid\r\n    ///\r\n    getItemPosition(gridWidth, gridHeight, gridRows, gridCols, width, height, left, top, renderMode) {\r\n        const flex = ( renderMode === renderModeType.flex )\r\n\r\n        // even though the container could change and these calculations need to rerun on that event,\r\n        // it looks much nicer if theyre percentages on the widgets - even if it temporarily gives a 1px gap\r\n        // and then closes the gap on mouse up, than having px values \r\n        if (flex) {\r\n           return {\r\n               ...this.getItemPositionPixels( gridWidth, gridHeight, gridRows, gridCols, width, height, left, top ),\r\n               ...this.getItemPositionPercentages( gridWidth, gridHeight, gridRows, gridCols, width, height, left, top ),\r\n           }\r\n        }\r\n        else {\r\n            return this.getItemPositionPixels( gridWidth, gridHeight, gridRows, gridCols, width, height, left, top )\r\n        }\r\n    },\r\n\r\n    getItemPositionPercentages( gridWidth, gridHeight, gridRows, gridCols, width, height, left, top ) {\r\n        const pxPerColFloored = Math.floor(gridWidth / gridCols)\r\n        const pxPerRowFloored = Math.floor(gridHeight / gridRows)\r\n        const colRemainderPx = gridWidth - pxPerColFloored * gridCols\r\n        const rowRemainderPx = gridHeight - pxPerRowFloored * gridRows\r\n        // todo check if need to * by required precision and floor to avoid decimal calc\r\n        const widthPxOffset = (49 / gridWidth) / 100\r\n        const heightPxOffset = (49 / gridHeight) / 100\r\n\r\n        const extraLeft = Math.min(left, colRemainderPx)\r\n        const extraWidth = Math.min(width + left, colRemainderPx) - extraLeft\r\n        const extraTop = Math.min(top, rowRemainderPx)\r\n        const extraHeight = Math.min(height + top, rowRemainderPx) - extraTop\r\n\r\n        // shift it by 2/5 px percent to always count for rounding errors\r\n        // could do anything below 1/2 but this is sufficient as \r\n        // (40 / x = 0.01% limit => pxLimit = 40 / 0.01 = 4000px\r\n        const leftPct = ((left * pxPerColFloored + extraLeft) * 100) / gridWidth + widthPxOffset\r\n        const widthPct = ((width * pxPerColFloored + extraWidth) * 100) / gridWidth + widthPxOffset\r\n        const topPct = ((top * pxPerRowFloored + extraTop) * 100) / gridHeight + heightPxOffset\r\n        const heightPct = ((height * pxPerRowFloored + extraHeight) * 100) / gridHeight + heightPxOffset\r\n\r\n        const ending = '%';\r\n\r\n        return { leftPct, widthPct, topPct, heightPct, ending }\r\n    },\r\n\r\n    getItemPositionPixels( gridWidth, gridHeight, gridRows, gridCols, width, height, left, top ) {\r\n        const pxPerColFloored = Math.floor(gridWidth / gridCols)\r\n        const pxPerRowFloored = Math.floor(gridHeight / gridRows)\r\n        const colRemainderPx = gridWidth - pxPerColFloored * gridCols\r\n        const rowRemainderPx = gridHeight - pxPerRowFloored * gridRows\r\n\r\n        const extraLeft = Math.min(left, colRemainderPx)\r\n        const extraWidth = Math.min(width + left, colRemainderPx) - extraLeft\r\n        const extraTop = Math.min(top, rowRemainderPx)\r\n        const extraHeight = Math.min(height + top, rowRemainderPx) - extraTop\r\n\r\n        const widthPx = pxPerColFloored * width + extraWidth\r\n        const heightPx = pxPerRowFloored * height + extraHeight\r\n        const topPx = pxPerRowFloored * top + extraTop\r\n        const leftPx = pxPerColFloored * left + extraLeft\r\n\r\n        const ending = 'px';\r\n\r\n        return { widthPx, heightPx, topPx, leftPx, ending }\r\n    },\r\n\r\n    updateMovedItem( item, gridSizing, gridOptions ) {\r\n        const { newX, newY, newWidth, newHeight } = item\r\n        const { gridWidth, gridHeight, gridRows, gridColumns } = gridSizing\r\n        const renderMode = gridOptions.renderMode\r\n        const movedItem = { ...item }\r\n\r\n        if ( ! ( newWidth && newHeight ) ) {\r\n            console.error( `Item ${ key } does not have a newWidth or newHeight value. Unable to correctly resize item`)\r\n            return item\r\n        }\r\n\r\n        // update the values with the set new values\r\n        movedItem.x = newX\r\n        movedItem.y = newY\r\n        movedItem.width = newWidth\r\n        movedItem.height = newHeight\r\n\r\n        const position = this.getItemPosition( gridWidth, gridHeight, gridRows, gridColumns, movedItem.width, movedItem.height, movedItem.x, movedItem.y, renderMode )\r\n        const styles = this.getItemPositionStyles( gridOptions, movedItem.styles, position )\r\n\r\n        movedItem.position = { ...position }\r\n        movedItem.styles = { ...styles }\r\n\r\n        return movedItem\r\n    },\r\n\r\n    updateGridWithMovedItems( grid, items ) {\r\n        for ( const key in items ) {\r\n            const movedItem = items[ key ]\r\n            this.updateGridWithItemMovement( grid, movedItem, movedItem.x, movedItem.y, movedItem.width, movedItem.height )\r\n        }\r\n    },\r\n\r\n    getUpdatedMovedItems( items, draggedItemId, newTopPx, newLeftPx, newWidthPx, newHeightPx, gridSizing, gridOptions ) {\r\n        return items.forEach(item => {\r\n            const movedItem = this.updateMovedItem( item, gridSizing, gridOptions )\r\n\r\n            if ( key === draggedItemId ) {\r\n                // todo sync the %\r\n                const position = {\r\n                    ...movedItem.position,\r\n                    ending: 'px',\r\n                    topPx: newTopPx,\r\n                    leftPx: newLeftPx,\r\n                    widthPx: newWidthPx,\r\n                    heightPx: newHeightPx\r\n                }\r\n\r\n                const styles = this.getItemPositionStyles( gridOptions, movedItem.styles, position )\r\n\r\n                movedItem.position = { ...position }\r\n                movedItem.styles = { ...styles }\r\n            }\r\n\r\n            return movedItem\r\n        })\r\n    },\r\n\r\n    getUpdatedGridSizeItems( items, gridOptions, gridSizing, ignoreIds = [] ) {\r\n        const renderMode = gridOptions.renderMode\r\n        const { gridRows, gridColumns, gridHeight, gridWidth } = gridSizing \r\n\r\n        return items.map( ( item ) => {\r\n            \r\n            if ( ignoreIds.indexOf( item.id ) > -1 )\r\n                return\r\n\r\n            const position = this.getItemPosition( gridWidth, gridHeight, gridRows, gridColumns, item.width, item.height, item.x, item.y, renderMode )\r\n            const styles = this.getItemPositionStyles( gridOptions, item.styles, position )\r\n\r\n            return {\r\n                ...item,\r\n                position,\r\n                styles\r\n            }\r\n        })\r\n    },\r\n\r\n    getGridBoundaries( gridSizing ) {\r\n        const { gridWidth, gridHeight } = gridSizing\r\n\r\n        return {\r\n            leftBoundary: 0,\r\n            rightBoundary: gridWidth,\r\n            topBoundary: 0,\r\n            bottomBoundary: gridHeight\r\n        }\r\n    },\r\n\r\n    getItemSizing( itemProps, gridSizing ) {\r\n        const { gridWidth, gridHeight } = gridSizing\r\n        const { width, height } = itemProps\r\n        const pxPerColumn = gridWidth / gridColumns\r\n        const pxPerRow = gridHeight / gridRows\r\n        const itemWidthPx = width * pxPerColumn\r\n        const itemHeightPx = height * pxPerRow\r\n\r\n        return { itemWidthPx, itemHeightPx }\r\n    },\r\n\r\n    calculateGridMatrixSize( items, gridOptions, gridSizing ) {\r\n        const { itemsCanResizeGrid, resizeGridDirections } = gridOptions\r\n        const { gridRows, gridColumns } = gridSizing\r\n        const canResizeX = itemsCanResizeGrid && resizeGridDirections !== 'y'\r\n        const canResizeY = itemsCanResizeGrid && resizeGridDirections !== 'x'\r\n\r\n        if ( !( canResizeX || canResizeY ) ) {\r\n            return {\r\n                rows: gridRows,\r\n                columns: gridColumns\r\n            }\r\n        }\r\n\r\n        let rowsRequired = 0\r\n        let columnsRequired = 0\r\n\r\n        items.forEach(item => {\r\n            const rightBoundary = item.x + item.width\r\n            const bottomBoundary = item.y + item.height\r\n\r\n            if ( rightBoundary > columnsRequired )\r\n                columnsRequired = rightBoundary\r\n\r\n            if ( bottomBoundary > rowsRequired )\r\n                rowsRequired = bottomBoundary\r\n        })\r\n\r\n        return {\r\n            rows: canResizeY ? Math.max( rowsRequired, gridRows ) : gridRows,\r\n            columns: canResizeX ? Math.max( columnsRequired, gridColumns ) : gridColumns\r\n        }\r\n    },\r\n\r\n    calculateGridSize( gridSizing, gridOptions, newRowCount, newColumnCount ) {\r\n        const {  gridRows, gridColumns, } = gridOptions \r\n        const { widthPx, heightPx } = gridSizing\r\n        \r\n        const newGridWidth = ( widthPx / gridColumns ) * newColumnCount\r\n        const newGridHeight = ( heightPx / gridRows ) * newRowCount\r\n\r\n        return {\r\n            newGridWidth,\r\n            newGridHeight\r\n        }\r\n    },\r\n\r\n    calculateMovementChange( itemProps, gridOptions, gridSizing, movementDetails  ) {\r\n        const gridResizeable = gridOptions.itemsCanResizeGrid\r\n        const canResizeX = gridResizeable && gridOptions.resizeGridDirections !== 'y'\r\n        const canResizeY = gridResizeable && gridOptions.resizeGridDirections !== 'x'\r\n\r\n        const pxPerColumn = gridSizing.widthPx / gridOptions.gridColumns\r\n        const pxPerRow = gridSizing.heightPx / gridOptions.gridRows\r\n        const xDiff = movementDetails.currentMouseX - movementDetails.initialMouseX\r\n        const yDiff = movementDetails.currentMouseY - movementDetails.initialMouseY\r\n        \r\n        let newLeftPx = movementDetails.initialLeft + xDiff\r\n        let newTopPx = movementDetails.initialTop + yDiff\r\n        let newX = Math.round( newLeftPx / pxPerColumn )\r\n        let newY = Math.round( newTopPx / pxPerRow )\r\n\r\n        if ( newX < 0 ) {\r\n            newX = 0\r\n        }\r\n        else if ( newX + 1 > gridOptions.gridColumns && !canResizeX ) {\r\n            newX = gridOptions.gridColumns - 1\r\n        }\r\n\r\n        if ( newY < 0 ) {\r\n            newY = 0\r\n        }\r\n        else if ( newY + 1 > gridOptions.gridRows && !canResizeY ) {\r\n            newY = gridOptions.gridRows - 1\r\n        }\r\n\r\n        return {\r\n            newX,\r\n            newY,\r\n            newLeftPx,\r\n            newTopPx,\r\n        }\r\n    },\r\n\r\n    calculateResizeChange( itemProps, gridOptions, gridSizing, movementDetails  ) {\r\n        const pxPerColumn = gridSizing.widthPx / gridOptions.gridColumns\r\n        const pxPerRow = gridSizing.heightPx / gridOptions.gridRows\r\n        const xDiff = movementDetails.currentMouseX - movementDetails.initialMouseX\r\n        const yDiff = movementDetails.currentMouseY - movementDetails.initialMouseY\r\n        \r\n        let newWidthPx = movementDetails.initialWidth + xDiff\r\n        let newHeightPx = movementDetails.initialHeight + yDiff\r\n        let newWidth = Math.round( newWidthPx / pxPerColumn )\r\n        let newHeight = Math.round( newHeightPx / pxPerRow )\r\n\r\n        if ( newWidthPx < pxPerColumn ) {\r\n            newWidth = 1\r\n            newWidthPx = pxPerColumn\r\n        }\r\n\r\n        if ( newHeightPx < pxPerRow ) {\r\n            newHeight = 1\r\n            newHeightPx = pxPerRow\r\n        }\r\n\r\n        return {\r\n            newWidthPx,\r\n            newHeightPx,\r\n            newWidth,\r\n            newHeight,\r\n            newLeftPx: itemProps.position.leftPx,\r\n            newTopPx: itemProps.position.topPx\r\n        }\r\n    },\r\n\r\n    calculatePositionChange( itemProps, state ) {\r\n        const { gridSizing, gridOptions } = state\r\n\r\n        const pxPerColumn = gridSizing.widthPx / gridOptions.gridColumns\r\n        const pxPerRow = gridSizing.heightPx / gridOptions.gridRows\r\n\r\n        return {\r\n            newWidthPx: Math.round( pxPerColumn * itemProps.width ),\r\n            newHeightPx: Math.round( pxPerRow * itemProps.height ),\r\n            newLeftPx: Math.round( pxPerColumn * itemProps.x ),\r\n            newTopPx: Math.round( pxPerRow * itemProps.y ),\r\n            newX: itemProps.x,\r\n            newY: itemProps.y,\r\n            newWidth: itemProps.width,\r\n            newHeight: itemProps.height,\r\n        }\r\n    },\r\n\r\n    getNoMovementResult( state, itemProps, movementChange ) {\r\n        const targetItem = {\r\n            ...itemProps,\r\n            position: {\r\n                ...itemProps.position,\r\n                ending: 'px',\r\n                topPx: movementChange.newTopPx, // todo this is wrong\r\n                leftPx: movementChange.newLeftPx,\r\n                widthPx: movementChange.newWidthPx,\r\n                heightPx: movementChange.newHeightPx\r\n            }\r\n        }\r\n\r\n        const updatedItems = state.items.map(item => {\r\n            if ( item.id == targetItem.id ) {\r\n                return targetItem\r\n            }\r\n\r\n            return item\r\n        })\r\n\r\n        return {\r\n            success: true, // todo should this be false?\r\n            grid: state.grid,\r\n            updatedItems,\r\n            targetItem,\r\n            gridSizing: state.gridSizing,\r\n            movementChange,\r\n            itemsMoved: false\r\n        }\r\n    },\r\n\r\n    itemHasMoved( itemProps, movementChange ) {\r\n        return ( movementChange.newX != itemProps.x ) || ( movementChange.newY != itemProps.y )\r\n    },\r\n\r\n    itemHasResized( itemProps, movementChange ) {\r\n        return ( movementChange.newWidth !== itemProps.width ) || ( movementChange.newHeight !== itemProps.height ) \r\n    },\r\n\r\n    checkProposedGridSizing( state, proposedGridColumns, proposedGridRows ) {\r\n        const {  gridOptions } = state\r\n\r\n        const canResizeX = ( gridOptions.resizeGridDirections !== resizeOptions.y )\r\n        const canResizeY = ( gridOptions.resizeGridDirections !== resizeOptions.x )\r\n\r\n        if ( ( !canResizeX && proposedGridColumns !== gridOptions.gridColumns ) || gridOptions.gridColumns < 1 )\r\n            throw 'Invalid grid column proposition from algorithm'\r\n\r\n        else if ( ( !canResizeY && proposedGridRows !== gridOptions.gridRows ) || gridOptions.gridRows < 1 )\r\n            throw 'Invalid grid row proposition from algorithm'\r\n    },\r\n\r\n    getPlaceholderStyles( position ) {\r\n        return {\r\n            ...defaultPlaceholderStyles,\r\n            left: `${ position.leftPx }px`,\r\n            top: `${ position.topPx }px`,\r\n            width: `${ position.widthPx }px`,\r\n            height: `${ position.heightPx }px`\r\n        }\r\n    },\r\n\r\n    addItemToGrid( itemProps, state ) {\r\n        const movementChange = {\r\n            newX: itemProps.x,\r\n            newY: itemProps.y,\r\n            newWidth: itemProps.width,\r\n            newHeight: itemProps.height,\r\n            newTopPx: itemProps.position.topPx,\r\n            newLeftPx: itemProps.position.leftPx,\r\n            newWidthPx: itemProps.position.widthPx,\r\n            newHeightPx: itemProps.position.heightPx\r\n        }\r\n\r\n        return this.onItemMovement( itemProps, state, movementChange )\r\n    },\r\n\r\n    movementIsWithinBounds( movementChange, gridOptions ) {\r\n        const { \r\n            gridColumns, \r\n            gridRows, \r\n            itemsCanResizeGrid, \r\n            resizeGridDirections \r\n        } = gridOptions\r\n\r\n        const {\r\n            newX,\r\n            newY,\r\n            newWidth,\r\n            newHeight\r\n        } = movementChange\r\n\r\n        const canResizeX = itemsCanResizeGrid && resizeGridDirections !== 'y'\r\n        const canResizeY = itemsCanResizeGrid && resizeGridDirections !== 'x'\r\n\r\n        return ( canResizeX || ( newX + newWidth <= gridColumns ) )\r\n            && ( canResizeY || ( newY + newHeight <= gridRows  ) )\r\n    },\r\n\r\n    onItemMovement( itemProps, state, movementChange ) {\r\n        const renderMode = state.gridOptions.renderMode\r\n        const { gridOptions } = state\r\n        const defaultResult = this.getNoMovementResult( state, itemProps, movementChange )\r\n        const draggedItem = { ...itemProps }\r\n\r\n        if ( !this.movementIsWithinBounds( movementChange, gridOptions ) ) {\r\n            return defaultResult\r\n        }\r\n\r\n        const dragResult = gridOptions.algo.run( state, draggedItem, movementChange.newX, movementChange.newY, movementChange.newWidth, movementChange.newHeight )\r\n        \r\n        if ( !dragResult.success ){\r\n            return defaultResult\r\n        }\r\n\r\n        const gridResized = ( dragResult.gridColumns !== gridOptions.gridColumns ) \r\n            || ( dragResult.gridRows !== gridOptions.gridRows )\r\n\r\n        let gridWidth = state.gridSizing.widthPx\r\n        let gridHeight = state.gridSizing.heightPx\r\n        \r\n        if ( gridResized ) {\r\n            this.checkProposedGridSizing( state, dragResult.gridColumns, dragResult.gridRows )\r\n            const newSize = this.calculateGridSize( state.gridSizing, gridOptions, dragResult.gridRows, dragResult.gridColumns )\r\n            gridWidth = newSize.newGridWidth\r\n            gridHeight = newSize.newGridHeight\r\n        }\r\n\r\n        const updatedItems = Object.keys( dragResult.itemsToMove )\r\n            .map(key => {\r\n                const movedItem = dragResult.itemsToMove[ key ]\r\n\r\n                const position = this.getItemPosition( \r\n                    gridWidth, \r\n                    gridHeight, \r\n                    dragResult.gridRows,\r\n                    dragResult.gridColumns, \r\n                    movedItem.width, \r\n                    movedItem.height, \r\n                    movedItem.x, \r\n                    movedItem.y, \r\n                    renderMode \r\n                )\r\n    \r\n                // without these the item will jitter\r\n                if ( movedItem.id === draggedItem.id ) {\r\n                    const placeholderStyles = this.getPlaceholderStyles( position )\r\n    \r\n                    movedItem.meta = {\r\n                        ...movedItem.meta,\r\n                        placeholderStyles\r\n                    }\r\n    \r\n                    movedItem.position = {\r\n                        ...movedItem.position,\r\n                        ending: 'px',\r\n                        topPx: movementChange.newTopPx,\r\n                        leftPx: movementChange.newLeftPx,\r\n                        widthPx: movementChange.newWidthPx,\r\n                        heightPx: movementChange.newHeightPx\r\n                    }\r\n    \r\n                    movedItem.styles = this.getItemPositionStyles( gridOptions, movedItem.styles, movedItem.position )\r\n                    console.log( movedItem.styles )\r\n                }\r\n                else {\r\n                    movedItem.position = position\r\n                    movedItem.styles = this.getItemPositionStyles( gridOptions, movedItem.styles, position )\r\n                }\r\n                \r\n                return movedItem\r\n            })\r\n\r\n        return {\r\n            success: dragResult.success,\r\n            grid: state.grid,\r\n            updatedItems,\r\n            itemsMoved: Object.keys( dragResult.itemsToMove ).length > 1,\r\n            targetItem: draggedItem,\r\n            movementChange,\r\n            gridSizing: {\r\n                gridRows: dragResult.gridRows,\r\n                gridColumns: dragResult.gridColumns,\r\n                heightPx: gridHeight,\r\n                widthPx: gridWidth\r\n            }\r\n        }\r\n    },\r\n\r\n    onItemPositionChanged( itemProps, previousItemProps, state ) {\r\n        const positionChange = this.calculatePositionChange( itemProps, state ) \r\n\r\n        if ( !this.positionHasChanged( itemProps, previousItemProps )) {\r\n            return this.getNoMovementResult( state, previousItemProps, positionChange )\r\n        }      \r\n\r\n        return this.onItemMovement( previousItemProps, state, positionChange )\r\n    },\r\n\r\n    positionHasChanged( itemProps, previousItemProps ) {\r\n        return itemProps.x !== previousItemProps.x\r\n            || itemProps.y !== previousItemProps.y\r\n            || itemProps.width !== previousItemProps.width\r\n            || itemProps.height !== previousItemProps.height\r\n    },\r\n\r\n    onItemDragStart( itemProps ) {\r\n        if ( itemProps.glued )\r\n            return { \r\n                item: itemProps,\r\n                success: false\r\n            }\r\n\r\n        const placeholderStyles = this.getPlaceholderStyles( itemProps.position )\r\n\r\n        const item = {\r\n            ...itemProps,\r\n            meta: {\r\n                ...itemProps.meta,\r\n                isDragging: true,\r\n                placeholderStyles\r\n            }\r\n        }\r\n\r\n        return {\r\n            item,\r\n            success: true\r\n        }\r\n    },\r\n\r\n    ///\r\n    /// Handles all drag logic\r\n    ///\r\n    onItemDrag( itemProps, state, movementDetails ) {\r\n        const movementChange = {\r\n            ...this.calculateMovementChange( itemProps, state.gridOptions, state.gridSizing, movementDetails ),\r\n            newWidth: itemProps.width,\r\n            newHeight: itemProps.height,\r\n            newWidthPx: itemProps.position.widthPx,\r\n            newHeightPx: itemProps.position.heightPx\r\n        }\r\n\r\n        if ( !itemProps.meta.isDragging || itemProps.glued ){   \r\n            return this.getNoMovementResult( state, itemProps, movementChange )\r\n        }\r\n        else if ( !this.itemHasMoved( itemProps, movementChange ) ) {\r\n            return this.getNoMovementResult( state, itemProps, movementChange )\r\n        }\r\n\r\n        return this.onItemMovement( itemProps, state, movementChange )\r\n    },\r\n\r\n    onItemDragStop ( itemProps, items, gridWidth, gridHeight, gridOptions, gridSizing ) {\r\n        const { width, height, x, y } = itemProps\r\n        const { gridRows, gridColumns, renderMode } = gridOptions\r\n\r\n        const meta = { ...itemProps.meta, isDragging: false }\r\n\r\n        const position = this.getItemPosition( gridWidth, gridHeight, gridRows, gridColumns, width, height, x, y, renderMode )\r\n        const styles = this.getItemPositionStyles( gridOptions, itemProps.styles, position )\r\n\r\n        const updatedItem = { \r\n            ...itemProps,\r\n            position,\r\n            styles,\r\n            meta\r\n        }\r\n        \r\n        return updatedItem\r\n    },\r\n\r\n    onItemResizeStart( itemProps ) {\r\n        if ( itemProps.glued ) {\r\n            return { \r\n                item: itemProps,\r\n                success: false\r\n            }\r\n        }\r\n        \r\n        const item = {\r\n            ...itemProps,\r\n            meta: {\r\n                ...itemProps.meta,\r\n                isResizing: true,\r\n            }\r\n        }\r\n\r\n        return {\r\n            item,\r\n            success: true\r\n        }\r\n    },\r\n\r\n    onItemResize( itemProps, state, movementDetails ) {\r\n        const movementChange = {\r\n            ...this.calculateResizeChange( itemProps, state.gridOptions, state.gridSizing, movementDetails ),\r\n            newX: itemProps.x,\r\n            newY: itemProps.y,\r\n            newLeftPx: itemProps.position.leftPx,\r\n            newTopPx: itemProps.position.topPx,\r\n        }\r\n\r\n        if ( !itemProps.meta.isResizing || itemProps.glued ) {\r\n            return this.getNoMovementResult( state, itemProps, movementChange )\r\n        }\r\n        else if ( !this.itemHasResized( itemProps, movementChange ) ) {\r\n            return this.getNoMovementResult( state, itemProps, movementChange )\r\n        }\r\n\r\n        return this.onItemMovement( itemProps, state, movementChange )\r\n    },\r\n\r\n    onItemResizeStop ( itemProps, items, gridWidth, gridHeight, gridOptions, gridSizing ) {\r\n        const { width, height, x, y } = itemProps\r\n        const { gridRows, gridColumns, renderMode } = gridOptions\r\n\r\n        const meta = { ...itemProps.meta, isResizing: false }\r\n\r\n        const position = this.getItemPosition( gridWidth, gridHeight, gridRows, gridColumns, width, height, x, y, renderMode )\r\n        const styles = this.getItemPositionStyles( gridOptions, itemProps.styles, position )\r\n\r\n        const updatedItem = { \r\n            ...itemProps,\r\n            position,\r\n            styles,\r\n            meta\r\n        }\r\n\r\n        return updatedItem\r\n    },\r\n\r\n    ///\r\n    /// Updates the internal 2d grid with the new item position. itemProps should contain the current values, prior to being updated\r\n    ///\r\n    updateGridWithItemMovement( grid, itemProps, oldX, oldY, oldWidth, oldHeight ) {\r\n        const { id, x, y, width, height } = itemProps\r\n\r\n        this.ensureGridHasRow( grid, y )\r\n\r\n        this.setGridWithValue( grid, id, oldX, oldY, oldWidth, oldHeight, undefined, false )\r\n        this.setGridWithValue( grid, id, x, y, width, height, itemProps, true )\r\n    },\r\n\r\n    updateGridWithItem( grid, itemProps ) {\r\n        const { id, x, y, width, height } = itemProps\r\n\r\n        this.setGridWithValue( grid, id, x, y, width, height, itemProps, true )\r\n    },\r\n\r\n    removeGridItem( gridItems, grid, itemProps, gridOptions, gridSizing ) {\r\n        const { id, x, y, width, height } = itemProps\r\n        const { widthPx, heightPx } = gridSizing\r\n        const { renderMode } = gridOptions\r\n\r\n        this.ensureGridHasRow( grid, y )\r\n        this.setGridWithValue( grid, id, x, y, width, height, undefined, true )\r\n\r\n        // todo handle grid resize\r\n        const itemsReverted = gridOptions.algo.onGridItemRemoved( itemProps, grid, gridOptions )\r\n\r\n        const updatedItems = gridItems\r\n            .map( item => {\r\n                const revertDetails = itemsReverted.find( i => i.id === item.id )\r\n\r\n                if ( !revertDetails )\r\n                    return null\r\n                \r\n                const { x, y, width, height } = revertDetails\r\n\r\n                const movedItem = {\r\n                    ...item,\r\n                    x,\r\n                    y,\r\n                    width,\r\n                    height\r\n                }\r\n                \r\n                const position = this.getItemPosition( \r\n                    widthPx,\r\n                    heightPx, \r\n                    gridOptions.gridRows,\r\n                    gridOptions.gridColumns, \r\n                    width, \r\n                    height, \r\n                    x, \r\n                    y, \r\n                    renderMode \r\n                )\r\n    \r\n                movedItem.position = position\r\n                movedItem.styles = this.getItemPositionStyles( gridOptions, movedItem.styles, position )\r\n                \r\n                return movedItem\r\n            })\r\n            .filter( item => item != null )\r\n        \r\n        return {\r\n            updatedItems\r\n        }\r\n    },\r\n\r\n    ensureGridHasRow( grid, rowIndex ) {\r\n        if ( !grid[ rowIndex ] )\r\n            grid[ rowIndex ] = []\r\n    },\r\n\r\n    ///\r\n    /// Set the internal 2d grid with the value specified within the { x, x + width, y, y + height } range as long as the cell does not contain a different item already\r\n    ///\r\n    setGridWithValue( grid, id, x, y, width, height, value, overwrite = false ) {\r\n        for (let j = y; j < y + height; j++)\r\n            for (let i = x; i < x + width; i++) {\r\n                const cellValue = grid[ j ][ i ]\r\n                if ( !helpers.isDefined( cellValue ) || cellValue.id == id || overwrite )\r\n                    grid[ j ][ i ] = value\r\n            }\r\n    },\r\n\r\n    getItemPositionStyles( gridOptions, styles, position ) {\r\n        const { transform, left, top, ...otherStyles } = styles || {}\r\n\r\n        if ( position.ending === '%' ) {\r\n            return {\r\n                ...otherStyles,\r\n                left: `${ position.leftPct }%`,\r\n                top: `${ position.topPct }%`,\r\n                width: `${ position.widthPct }%`,\r\n                height: `${ position.heightPct }%`\r\n            }\r\n        }\r\n        else if ( gridOptions.enableCSS3 ) {\r\n            return {\r\n                ...otherStyles,\r\n                width: `${ position.widthPx }px`,\r\n                height: `${ position.heightPx }px`,\r\n                transform: `translate(${ position.leftPx }px, ${ position.topPx }px)`\r\n            }\r\n        }\r\n\r\n        return {\r\n            ...otherStyles,\r\n            left: `${ position.leftPx }px`,\r\n            top: `${ position.topPx }px`,\r\n            width: `${ position.widthPx }px`,\r\n            height: `${ position.heightPx }px`\r\n        }\r\n    },\r\n\r\n    ///\r\n    /// Gets the internal grid x,y equivalent for the supplied top & left px values\r\n    ///\r\n    getGridXY( gridSizing, topPx, leftPx ) {\r\n        const { gridWidth, gridHeight, gridRows, gridColumns } = gridSizing\r\n        \r\n        const x = this.getGridPosition( gridWidth, leftPx, gridColumns )\r\n        const y = this.getGridPosition( gridHeight, topPx, gridRows )\r\n\r\n        return { x, y }\r\n    },\r\n\r\n    getGridWH( gridWidth, gridHeight, widthPx, heightPx, gridSizing ) {\r\n        const { gridRows, gridColumns } = gridSizing\r\n\r\n        const width = this.getGridPosition( gridWidth, widthPx, gridColumns )\r\n        const height = this.getGridPosition( gridHeight, heightPx, gridRows )\r\n\r\n        return { width, height }\r\n    },\r\n    \r\n    getGridPosition( gridPixels, itemPixels, matrixLevels ) {\r\n        return Math.max( 1, Math.round( itemPixels / gridPixels * matrixLevels ) )\r\n    },\r\n\r\n    getBoundaryLimitedSizing( currentLeftPx, currentTopPx, currentWidthPx, currentHeightPx, boundaries, gridOptions ) {\r\n        const { resizeGridDirections, itemsCanResizeGrid } = gridOptions\r\n        const { rightBoundary, bottomBoundary } = boundaries\r\n\r\n        const xResizeable = itemsCanResizeGrid && resizeGridDirections !== resizeOptions.y\r\n        const yResizeable = itemsCanResizeGrid && resizeGridDirections !== resizeOptions.x\r\n\r\n        const widthPx = xResizeable ? currentWidthPx : Math.min( currentWidthPx, rightBoundary - currentLeftPx )\r\n        const heightPx = yResizeable ? currentHeightPx : Math.min( currentHeightPx, bottomBoundary - currentTopPx )\r\n\r\n        return { widthPx, heightPx }\r\n    }\r\n}\r\n\r\nexport {\r\n    renderModeType, \r\n    resizeOptions, \r\n    defaultItemOptions, \r\n    defaultGridOptions,\r\n}"],"sourceRoot":""}